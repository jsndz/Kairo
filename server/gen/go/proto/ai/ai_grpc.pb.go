// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/ai.proto

package aipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_Summarize_FullMethodName = "/ai.AIService/Summarize"
	AIService_Rewrite_FullMethodName   = "/ai.AIService/Rewrite"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIServiceClient interface {
	Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummarizeResponse], error)
	Rewrite(ctx context.Context, in *RewriteRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RewriteResponse], error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SummarizeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[0], AIService_Summarize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SummarizeRequest, SummarizeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_SummarizeClient = grpc.ServerStreamingClient[SummarizeResponse]

func (c *aIServiceClient) Rewrite(ctx context.Context, in *RewriteRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RewriteResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[1], AIService_Rewrite_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RewriteRequest, RewriteResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_RewriteClient = grpc.ServerStreamingClient[RewriteResponse]

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
type AIServiceServer interface {
	Summarize(*SummarizeRequest, grpc.ServerStreamingServer[SummarizeResponse]) error
	Rewrite(*RewriteRequest, grpc.ServerStreamingServer[RewriteResponse]) error
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) Summarize(*SummarizeRequest, grpc.ServerStreamingServer[SummarizeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Summarize not implemented")
}
func (UnimplementedAIServiceServer) Rewrite(*RewriteRequest, grpc.ServerStreamingServer[RewriteResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Rewrite not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_Summarize_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummarizeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).Summarize(m, &grpc.GenericServerStream[SummarizeRequest, SummarizeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_SummarizeServer = grpc.ServerStreamingServer[SummarizeResponse]

func _AIService_Rewrite_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RewriteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).Rewrite(m, &grpc.GenericServerStream[RewriteRequest, RewriteResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_RewriteServer = grpc.ServerStreamingServer[RewriteResponse]

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Summarize",
			Handler:       _AIService_Summarize_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Rewrite",
			Handler:       _AIService_Rewrite_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ai.proto",
}
